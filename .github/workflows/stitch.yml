name: Stitch video from Google Drive (by IDs, 1080p YouTube-like)

on:
  workflow_dispatch:
    inputs:
      input_id:
        description: "ID del video principal (archivo de Drive)"
        required: true
      intro_id:
        description: "ID del video de intro (archivo de Drive)"
        required: true
      outro_id:
        description: "ID del video de outro (archivo de Drive)"
        required: true
      output_basename:
        description: "Nombre base de salida (sin .mp4)"
        default: "salida"
      video_bitrate_k:
        description: "Bitrate de video en kbps (auto|numero). Auto: 5500 (<=30fps) / 8000 (>30fps)"
        default: "auto"
      audio_bitrate_k:
        description: "Bitrate de audio en kbps"
        default: "128"

jobs:
  stitch:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Install ffmpeg, rclone, dnsutils
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg dnsutils
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Configure rclone with Service Account
        shell: bash
        env:
          SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
        run: |
          set -e
          umask 077
          printf '%s' "$SA_JSON" > sa.json
          cat > rclone.conf <<'EOF'
          [gdrive]
          type = drive
          scope = drive
          service_account_file = ./sa.json
          EOF

      - name: Network tweaks (force DNS + optional hosts pinning)
        shell: bash
        env:
          PIN_HOSTS: "true"   # cambia a "false" si no quieres tocar /etc/hosts
        run: |
          set -e
          sudo tee /etc/resolv.conf >/dev/null <<'EOF'
          nameserver 1.1.1.1
          nameserver 9.9.9.9
          nameserver 8.8.8.8
          options attempts:2 timeout:2
          EOF
          cat /etc/resolv.conf

          if [ "$PIN_HOSTS" = "true" ]; then
            echo "Pinneando /etc/hosts para googleapis (desactiva con PIN_HOSTS=false)"
            for host in www.googleapis.com oauth2.googleapis.com; do
              IP="$(
                { dig +short A "$host" @1.1.1.1; dig +short A "$host" @9.9.9.9; dig +short A "$host" @8.8.8.8; } \
                | sort -u | shuf -n1
              )"
              if [ -n "$IP" ]; then
                sudo sed -i.bak "/[[:space:]]$host$/d" /etc/hosts
                echo "$IP $host" | sudo tee -a /etc/hosts >/dev/null
                echo "Pinned $host -> $IP"
              fi
            done
            tail -n +1 /etc/hosts
          fi

      - name: Download by file IDs (copyid)
        shell: bash
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          mkdir -p in
          rclone backend copyid gdrive: "${{ inputs.input_id }}"  "in/input"
          rclone backend copyid gdrive: "${{ inputs.intro_id }}"  "in/intro"
          rclone backend copyid gdrive: "${{ inputs.outro_id }}"  "in/outro"

      - name: Probe main video parameters
        id: probe
        shell: bash
        run: |
          set -e
          VFILE="in/input"
          V_CODEC=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of csv=p=0 "$VFILE")
          WIDTH=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=p=0 "$VFILE")
          HEIGHT=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=p=0 "$VFILE")
          FPS_R=$(ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of csv=p=0 "$VFILE")
          A_CODEC=$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$VFILE" || echo "aac")
          A_SR=$(ffprobe -v error -select_streams a:0 -show_entries stream=sample_rate -of csv=p=0 "$VFILE" || echo "48000")
          A_CH=$(ffprobe -v error -select_streams a:0 -show_entries stream=channels -of csv=p=0 "$VFILE" || echo "2")
          case "$V_CODEC" in
            h264) VLIB=libx264 ;;
            hevc|h265) VLIB=libx265; V_CODEC=hevc ;;
            *) VLIB=libx264; V_CODEC=h264 ;;
          esac
          case "$A_CODEC" in
            aac) ALIB=aac ;; mp3) ALIB=libmp3lame ;; opus) ALIB=libopus ;; *) ALIB=aac; A_CODEC=aac ;;
          esac
          echo "vlib=$VLIB"      >> $GITHUB_OUTPUT
          echo "width=$WIDTH"    >> $GITHUB_OUTPUT
          echo "height=$HEIGHT"  >> $GITHUB_OUTPUT
          echo "fpsr=$FPS_R"     >> $GITHUB_OUTPUT
          echo "alib=$ALIB"      >> $GITHUB_OUTPUT
          echo "asr=$A_SR"       >> $GITHUB_OUTPUT
          echo "ach=$A_CH"       >> $GITHUB_OUTPUT

      - name: Transcode only intro and outro to match main
        shell: bash
        run: |
          set -e
          VLIB='${{ steps.probe.outputs.vlib }}'
          WIDTH='${{ steps.probe.outputs.width }}'
          HEIGHT='${{ steps.probe.outputs.height }}'
          FPSR='${{ steps.probe.outputs.fpsr }}'
          ALIB='${{ steps.probe.outputs.alib }}'
          ASR='${{ steps.probe.outputs.asr }}'
          ACH='${{ steps.probe.outputs.ach }}'

          ffmpeg -hide_banner -loglevel error -y -i "in/intro" \
            -vf "scale=${WIDTH}:${HEIGHT}:force_original_aspect_ratio=decrease,pad=${WIDTH}:${HEIGHT}:(ow-iw)/2:(oh-ih)/2" \
            -r "$FPSR" -c:v "$VLIB" -pix_fmt yuv420p -c:a "$ALIB" -ar "$ASR" -ac "$ACH" intro_t.mp4

          ffmpeg -hide_banner -loglevel error -y -i "in/outro" \
            -vf "scale=${WIDTH}:${HEIGHT}:force_original_aspect_ratio=decrease,pad=${WIDTH}:${HEIGHT}:(ow-iw)/2:(oh-ih)/2" \
            -r "$FPSR" -c:v "$VLIB" -pix_fmt yuv420p -c:a "$ALIB" -ar "$ASR" -ac "$ACH" outro_t.mp4

      - name: Concat (try -c copy, fallback reencode) -> out_concat.mp4
        shell: bash
        run: |
          set -e
          printf "file 'intro_t.mp4'\nfile 'in/input'\nfile 'outro_t.mp4'\n" > list.txt
          if ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i list.txt -c copy out_concat.mp4; then
            echo "Concat copy OK"
          else
            echo "Concat recode fallback"
            ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i list.txt \
              -c:v libx264 -preset veryfast -crf 20 -c:a aac -b:a 128k out_concat.mp4
          fi

      - name: Compress to 1080p YouTube-like (2-pass) -> out.mp4
        shell: bash
        env:
          VBIT_IN: ${{ inputs.video_bitrate_k }}
          ABIT: ${{ inputs.audio_bitrate_k }}
        run: |
          set -e
          SRC="out_concat.mp4"
          OUT="${{ inputs.output_basename }}.mp4"

          # fps numérico (redondeado)
          FPS=$(ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of csv=p=0 "$SRC" \
                | awk -F/ '{ if ($2==""||$2==0) print int($1+0.5); else printf "%.0f", $1/$2 }')
          [ -z "$FPS" ] && FPS=30

          # bitrate de video "estilo YT" por defecto (kbps): 1080p 30fps ~5.5Mbps, >30fps ~8Mbps
          if [ "$VBIT_IN" = "auto" ] || [ -z "$VBIT_IN" ]; then
            if [ "$FPS" -le 30 ]; then VBIT=5500; else VBIT=8000; fi
          else
            VBIT="$VBIT_IN"
          fi

          # GOP ≈ 2s
          GOP=$((FPS*2))
          # maxrate 1.45x y bufsize 3x (kbps)
          MAXK=$(( VBIT * 145 / 100 ))
          BUFK=$(( VBIT * 300 / 100 ))

          echo "Encoding 1080p H.264 High@4.2 2-pass: fps=${FPS}, gop=${GOP}, vbit=${VBIT}k, max=${MAXK}k, buf=${BUFK}k, aac=${ABIT}k"

          # PASO 1 (solo video)
          ffmpeg -hide_banner -loglevel error -y -i "$SRC" \
            -vf "scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2" \
            -c:v libx264 -preset slow -profile:v high -level 4.2 -pix_fmt yuv420p \
            -b:v ${VBIT}k -maxrate ${MAXK}k -bufsize ${BUFK}k \
            -g ${GOP} -keyint_min ${GOP} -sc_threshold 0 -bf 2 \
            -x264-params "aud=1:ref=3:deblock=1,1:me=umh:subme=6:rc-lookahead=40" \
            -an -f mp4 /dev/null

          # PASO 2 (video + audio)
          ffmpeg -hide_banner -loglevel error -y -i "$SRC" \
            -vf "scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2" \
            -c:v libx264 -preset slow -profile:v high -level 4.2 -pix_fmt yuv420p \
            -b:v ${VBIT}k -maxrate ${MAXK}k -bufsize ${BUFK}k \
            -g ${GOP} -keyint_min ${GOP} -sc_threshold 0 -bf 2 \
            -x264-params "aud=1:ref=3:deblock=1,1:me=umh:subme=6:rc-lookahead=40" \
            -c:a aac -b:a ${ABIT}k -ar 48000 -ac 2 \
            -movflags +faststart -tag:v avc1 "$OUT"

          rm -f ffmpeg2pass*.log

      - name: Upload output to destination folder by ID (256MiB chunks + backoff)
        shell: bash
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          DST_ID: ${{ secrets.DRIVE_DST_ID }}
        run: |
          set -e
          OUT="${{ inputs.output_basename }}.mp4"

          CONF="$RCLONE_CONFIG"
          if [ -n "$DST_ID" ]; then
            cp "$RCLONE_CONFIG" rclone.dst.conf
            echo "root_folder_id = $DST_ID" >> rclone.dst.conf
            CONF="$(pwd)/rclone.dst.conf"
          fi

          FLAGS="--drive-chunk-size 512M \
                 --transfers 1 --checkers 4 \
                 --tpslimit 2 --tpslimit-burst 2 \
                 --retries 7 --retries-sleep 20s --low-level-retries 50 \
                 --user-agent rclone-gha/1.0"

          try_upload () {
            set +e
            LOG=$(mktemp)
            RCLONE_CONFIG="$CONF" rclone copyto "$OUT" "gdrive:${OUT}" --log-level ERROR $FLAGS 2>"$LOG"
            RC=$?
            set -e
            echo "rclone exit: $RC"
            if [ $RC -ne 0 ]; then
              echo "----- rclone stderr (tail) -----"
              tail -n 50 "$LOG" || true
              echo "--------------------------------"
              if grep -q "HTTP response code 429" "$LOG"; then
                return 429
              fi
              return $RC
            fi
            return 0
          }

          for i in $(seq 1 6); do
            echo "Upload attempt $i ..."
            if try_upload; then
              echo "Uploaded: ${OUT}"
              exit 0
            fi
            ERR=$?
            if [ "$ERR" = "429" ]; then
              S=$((i*30))
              echo "429 detected. Sleeping ${S}s before retry..."
              sleep $S
            else
              echo "Non-429 error ($ERR). Aborting."
              exit $ERR
            fi
          done

          echo "Upload failed after retries."
          exit 1
