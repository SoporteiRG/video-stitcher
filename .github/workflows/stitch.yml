name: Stitch video from Google Drive (by IDs)

on:
  workflow_dispatch:
    inputs:
      input_id:
        description: "ID del video principal (archivo de Drive)"
        required: true
      intro_id:
        description: "ID del video de intro (archivo de Drive)"
        required: true
      outro_id:
        description: "ID del video de outro (archivo de Drive)"
        required: true
      output_basename:
        description: "Nombre base de salida (sin .mp4)"
        default: "salida"

jobs:
  stitch:
    runs-on: ubuntu-latest
    timeout-minutes: 350
    steps:
      - name: Install ffmpeg, rclone and jq
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq
          curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Configure rclone with Service Account (no root_folder_id)
        shell: bash
        env:
          SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
        run: |
          set -e
          umask 077
          printf '%s' "$SA_JSON" > sa.json
          cat > rclone.conf <<'EOF'
          [gdrive]
          type = drive
          scope = drive
          service_account_file = ./sa.json
          EOF

      - name: Preflight - resolve names from IDs and check access
        id: meta
        shell: bash
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          IN_ID: ${{ inputs.input_id }}
          INTRO_ID: ${{ inputs.intro_id }}
          OUTRO_ID: ${{ inputs.outro_id }}
        run: |
          set -e
          get_name () {
            rclone backend query gdrive: "id = '$1'" | jq -r '.[0].name // empty'
          }
          IN_NAME=$(get_name "$IN_ID")
          INTRO_NAME=$(get_name "$INTRO_ID")
          OUTRO_NAME=$(get_name "$OUTRO_ID")

          [ -z "$IN_NAME" ] && { echo "ERROR: sin acceso al ID de entrada"; exit 6; }
          [ -z "$INTRO_NAME" ] && { echo "ERROR: sin acceso al ID de intro"; exit 6; }
          [ -z "$OUTRO_NAME" ] && { echo "ERROR: sin acceso al ID de outro"; exit 6; }

          echo "in_name=$IN_NAME" >> $GITHUB_OUTPUT
          echo "intro_name=$INTRO_NAME" >> $GITHUB_OUTPUT
          echo "outro_name=$OUTRO_NAME" >> $GITHUB_OUTPUT

          echo "IDs ok:"
          echo " - Input: $IN_NAME"
          echo " - Intro: $INTRO_NAME"
          echo " - Outro: $OUTRO_NAME"

      - name: Download by file IDs (copyid)
        shell: bash
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          mkdir -p in
          rclone backend copyid gdrive: "${{ inputs.input_id }}"  "in/"
          rclone backend copyid gdrive: "${{ inputs.intro_id }}"  "in/"
          rclone backend copyid gdrive: "${{ inputs.outro_id }}"  "in/"

      - name: Probe main video parameters
        id: probe
        shell: bash
        run: |
          set -e
          VFILE="in/${{ steps.meta.outputs.in_name }}"
          V_CODEC=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of csv=p=0 "$VFILE")
          WIDTH=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=p=0 "$VFILE")
          HEIGHT=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=p=0 "$VFILE")
          FPS_R=$(ffprobe -v error -select_streams v:0 -show_entries stream=r_frame_rate -of csv=p=0 "$VFILE")
          A_CODEC=$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$VFILE" || echo "aac")
          A_SR=$(ffprobe -v error -select_streams a:0 -show_entries stream=sample_rate -of csv=p=0 "$VFILE" || echo "48000")
          A_CH=$(ffprobe -v error -select_streams a:0 -show_entries stream=channels -of csv=p=0 "$VFILE" || echo "2")

          case "$V_CODEC" in
            h264) VLIB=libx264 ;;
            hevc|h265) VLIB=libx265; V_CODEC=hevc ;;
            *) VLIB=libx264; V_CODEC=h264 ;;
          esac
          case "$A_CODEC" in
            aac) ALIB=aac ;;
            mp3) ALIB=libmp3lame ;;
            opus) ALIB=libopus ;;
            *) ALIB=aac; A_CODEC=aac ;;
          esac

          echo "vlib=$VLIB"      >> $GITHUB_OUTPUT
          echo "width=$WIDTH"    >> $GITHUB_OUTPUT
          echo "height=$HEIGHT"  >> $GITHUB_OUTPUT
          echo "fpsr=$FPS_R"     >> $GITHUB_OUTPUT
          echo "alib=$ALIB"      >> $GITHUB_OUTPUT
          echo "asr=$A_SR"       >> $GITHUB_OUTPUT
          echo "ach=$A_CH"       >> $GITHUB_OUTPUT

      - name: Transcode only intro and outro to match main
        shell: bash
        run: |
          set -e
          VLIB='${{ steps.probe.outputs.vlib }}'
          WIDTH='${{ steps.probe.outputs.width }}'
          HEIGHT='${{ steps.probe.outputs.height }}'
          FPSR='${{ steps.probe.outputs.fpsr }}'
          ALIB='${{ steps.probe.outputs.alib }}'
          ASR='${{ steps.probe.outputs.asr }}'
          ACH='${{ steps.probe.outputs.ach }}'

          ffmpeg -hide_banner -loglevel error -y -i "in/${{ steps.meta.outputs.intro_name }}" \
            -vf "scale=${WIDTH}:${HEIGHT}:force_original_aspect_ratio=decrease,pad=${WIDTH}:${HEIGHT}:(ow-iw)/2:(oh-ih)/2" \
            -r "$FPSR" -c:v "$VLIB" -pix_fmt yuv420p -c:a "$ALIB" -ar "$ASR" -ac "$ACH" intro_t.mp4

          ffmpeg -hide_banner -loglevel error -y -i "in/${{ steps.meta.outputs.outro_name }}" \
            -vf "scale=${WIDTH}:${HEIGHT}:force_original_aspect_ratio=decrease,pad=${WIDTH}:${HEIGHT}:(ow-iw)/2:(oh-ih)/2" \
            -r "$FPSR" -c:v "$VLIB" -pix_fmt yuv420p -c:a "$ALIB" -ar "$ASR" -ac "$ACH" outro_t.mp4

      - name: Concat (try -c copy, fallback reencode)
        shell: bash
        run: |
          set -e
          printf "file 'intro_t.mp4'\nfile 'in/${{ steps.meta.outputs.in_name }}'\nfile 'outro_t.mp4'\n" > list.txt
          if ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i list.txt -c copy out.mp4; then
            echo "Concat with -c copy OK"
          else
            echo "Param mismatch; reencoding all"
            ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i list.txt \
              -c:v libx264 -preset veryfast -crf 20 -c:a aac -b:a 128k out.mp4
          fi

      - name: Upload output to destination folder by ID
        shell: bash
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
          DST_ID: ${{ secrets.DRIVE_DST_ID }}
        run: |
          set -e
          OUT="${{ inputs.output_basename }}.mp4"
          if [ -n "$DST_ID" ]; then
            cp "$RCLONE_CONFIG" rclone.dst.conf
            echo "root_folder_id = $DST_ID" >> rclone.dst.conf
            RCLONE_CONFIG=$(pwd)/rclone.dst.conf rclone copyto out.mp4 "gdrive:${OUT}" --log-level ERROR
          else
            rclone copyto out.mp4 "gdrive:${OUT}" --log-level ERROR
          fi
          echo "Uploaded: ${OUT}"
